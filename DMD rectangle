#!/usr/bin/env python

# -*- coding: utf-8 -*-



# Importation des librairies


import PIL

import numpy as np
import scipy

from scipy.ndimage import rotate

import matplotlib.pyplot as plt

import PIL.Image as Image

import time

import sys

#from PIL import image

import matplotlib as mpl

from ALP4 import *

from PIL import Image
#import imageio
from PIL import Image, ImageDraw


# Définition des fonctions

def plot_intensity(image_paths):
    plt.figure()
    i=0
    for image_path in image_paths:
        img = Image.open(image_path).rotate(Rotation_angle)
        img_gray = img.convert("L")
        img_array = np.array(img_gray)
        row_intensity = np.mean(img_array, axis=1)
        plt.plot(row_intensity, label=i)
        i+=1
    plt.xlabel("Rows")
    plt.ylabel("Intensity")
    plt.title("Intensity of Rows")
    plt.legend()
    plt.show()

def affiche_DMD(img, nbImg, display_time):

    # Load the Vialux .dll

    DMD = ALP4(version = '4.3',libDir="./ALP-4.3 API") 



    # initialize the device

    DMD.Initialize()

    # Binary amplitude image

    # Quantization of the image between 1 (on/off) and 8 (256 pwm grayscale levels).

    bitDepth = 1

    # WARNING even for a boolean quantization, the values readed are 0 and 255.
    # Array generation

    imgAff = img[0].ravel(order='F')*255 # Modification to a 1D array for the DMD

    
    if nbImg>1: #Array generation for a sequence with more than 1 image
        for i in range(nbImg-1):
            np.concatenate([imgAff,(img[i+1].ravel(order='F')*255)])
    


    # Allocate the onboard memory for the image sequence

    # you can load many pictures change only nbImg

    seq1 = DMD.SeqAlloc(nbImg, bitDepth = bitDepth)



    # Send the image sequence as a 1D list/array/numpy array

    # enter the images of the sequences

    DMD.SeqPut(imgData =imgAff.ravel(order='F'))

    DMD.SeqControl(controlType=2104 , value=2106) # activation off the uninterrupted mode

    # set image rate to 50 Hz so period of 2e4 µs

    DMD.SetTiming(pictureTime = 2000) 



    # Run the sequence in an infinite loop

    DMD.Run(loop=True)

    ###there is two method for stopping the DMD: after a chosen time of after pressing enter. Only one method work when the programm is running ( not in comment )

    time.sleep(display_time) # stop the programm for the display time (in seconds) but let the DMD running his sequence

    #input("Press enter to stop the DMD") # stop the sequence display after pressing enter

    # stop the sequence display

    DMD.Halt()

    # Free the sequence from the onboard memory

    DMD.FreeSeq()

    #De-allocate the device

    DMD.Free()

    print("END")

    return


### Function creating different images


def croix(NombrePixel, ligne_croix, colonne_croix, epaisseur_ligne, epaisseur_colonne):

    """ Crée une croix sur le DMD """

    img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)



    # Ligne horizontale

    img[int(ligne_croix - epaisseur_ligne/2) : int(ligne_croix + epaisseur_ligne/2), :] = 1



    # Ligne verticale

    img[: , int(colonne_croix - epaisseur_colonne/2) : int(colonne_croix + epaisseur_colonne/2)] = 1



    return img



def rectangle(NombrePixel, centre, largeursur2, longueursur2, a):

    """ Crée un rectangle  ayant la valeur a (a = 0 ou 1) sur le DMD.

    centre doit être de la forme (ligne_centre, colonne_centre)

    Attention, NombrePixel = (nbre de colonne, nbre de ligne)

    """


    # Rectangle plus petit que le DMD

    assert centre[1] - largeursur2 >= 0

    assert centre[1] + largeursur2 <= NombrePixel[1]

    assert centre[0] - longueursur2 >=0

    assert centre[0] + longueursur2 <= NombrePixel[0]



    if a == 0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        for ligne in range(centre[0] - longueursur2, centre[0] + longueursur2):

            img[ligne, centre[1] - largeursur2 : centre[1] + largeursur2 ] = 0

    else :

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for ligne in range(centre[0] - longueursur2, centre[0] + longueursur2):

            img[ligne, centre[1] - largeursur2 : centre[1] + largeursur2 ] = 1



    return img



def uniforme(NombrePixel, a):

    """ Crée une image uniforme sur le DMD (a = 0 ou 1) """

    img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

    img[:,:] = a

    return img



def k_pixels(NombrePixel, k, a, position_ligne, debut_trait):

    """

    Crée une image avec k pixels qui valent a (a = 0 ou 1)

    position_ligne est la ligne sur laquelle les quelques pixels seront changés

    debut_trait est la colonne où le trait commence

    """

    # Trait plus petit que le DMD

    assert debut_trait + k <= NombrePixel[1]



    # Quelques pixels noirs sur fond blanc

    if a==0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        img[position_ligne, debut_trait : debut_trait + k] = 0



    # Quelques pixels blancs sur fond noir

    else:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        img[position_ligne, debut_trait : debut_trait + k] = 1



    return img


def points_magnification(NombrePixel):
     img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)
     img[960,540]=1
     img[961,540]=1
     img[960,541]=1
     img[961,541]=1



     img[1260,540]=1
     img[1261,540]=1
     img[1261,541]=1
     img[1260,541]=1

     img[1262,540]=1
     img[1263,541]=1
     img[1259,541]=1
     img[1264,540]=1
     img[1265,541]=1
     img[1256,541]=1
     img[1263,542]=1
     img[1259,543]=1
     img[1264,544]=1
     img[1265,545]=1
     img[1256,546]=1
     img[1263,539]=1
     img[1263,540]=1
     img[1259,540]=1
     img[1264,540]=1
     img[1264,541]=1
     img[1264,542]=1
     img[1264,543]=1
     img[1264,545]=1
     img[1265,540]=1
     img[1265,544]=1
     img[1265,543]=1
     img[1265,542]=1
     img[1256,540]=1



     img[960,840]=1
     img[961,840]=1
     img[961,841]=1
     img[960,841]=1
     return img


def deux_points(NombrePixel, k1, a, position_ligne_pt1, debut_trait_pt1, k2, position_ligne_pt2, debut_trait_pt2):

    """

    Crée une image avec k pixels qui valent a (a = 0 ou 1) à deux endroits différents

    position_ligne est la ligne sur laquelle les quelques pixels seront changés

    debut_trait est la colonne où le trait commence

    """

    # Trait plus petit que le DMD

    assert debut_trait_pt1 + k1 <= NombrePixel[1]

    assert debut_trait_pt2 + k2 <= NombrePixel[1]



    # Quelques pixels noirs sur fond blanc

    if a==0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        img[position_ligne_pt1, debut_trait_pt1 : debut_trait_pt1 + k1] = a

        img[position_ligne_pt2, debut_trait_pt2 : debut_trait_pt2 + k2] = a



    # Quelques pixels blancs sur fond noir

    else:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        img[position_ligne_pt1, debut_trait_pt1 : debut_trait_pt1 + k1] = a

        img[position_ligne_pt2, debut_trait_pt2 : debut_trait_pt2 + k2] = a



    return img



def reseau(NombrePixel, pas, a, epaisseur):

    """ Crée un réseau de point valant a (a = 0 ou 1), espacés de 'pas'. Les points du réseau ont une épaisseur 'epaisseur'. """

    if a == 1:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for ligne in range(0, NombrePixel[0], pas):

            for colonne in range(0, NombrePixel[1], pas):

                img[ ligne : ligne+epaisseur , colonne : colonne+epaisseur] = a

    else:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)



        for ligne in range(0, NombrePixel[0], pas):

            for colonne in range(0, NombrePixel[1], pas):

                img[ ligne : ligne+epaisseur , colonne : colonne+epaisseur] = a

    return img



def ligne_droite_verticale(NombrePixel, a, debut, longueur):

    """ Crée une ligne droite verticale (par rapport à nous donc incliné de 45° par rapport au DMD. debut de la forme (debut_colonne, debut_ligne) """

    if a == 0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        for n in range(longueur):

            img[ debut[1]+n , debut[0]-n ] = a

    if a == 1:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for n in range(longueur):

            img[ debut[1]+n , debut[0]-n ] = a

    return img



def ligne_droite_horizontale(NombrePixel, a, debut, longueur):

    """ Crée une ligne droite horizontale (par rapport à nous donc incliné de 45° par rapport au DMD. debut de la forme (debut_colonne, debut_ligne) """

    if a == 0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        for n in range(longueur):

            img[ debut[1]+n , debut[0]+n ] = a

    if a == 1:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for n in range(longueur):

            img[ debut[1]+n , debut[0]+n ] = a

    return img

############################ Function  #########################
def rectangle(NombrePixel, centre, largeursur2, longueursur2, a):

    """ Crée un rectangle  ayant la valeur a (a = 0 ou 1) sur le DMD.

    centre doit être de la forme (ligne_centre, colonne_centre)

    Attention, NombrePixel = (nbre de colonne, nbre de ligne)

    """


    # Rectangle plus petit que le DMD

    assert centre[1] - largeursur2 >= 0

    assert centre[1] + largeursur2 <= NombrePixel[1]

    assert centre[0] - longueursur2 >=0

    assert centre[0] + longueursur2 <= NombrePixel[0]



    if a == 0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        for ligne in range(centre[0] - longueursur2, centre[0] + longueursur2):

            img[ligne, centre[1] - largeursur2 : centre[1] + largeursur2 ] = 0

    else :

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for ligne in range(centre[0] - longueursur2, centre[0] + longueursur2):

            img[ligne, centre[1] - largeursur2 : centre[1] + largeursur2 ] = 1



    return img


    # Pixel number
def gaussian2(x,a,c,s):
    return a*np.exp(-((x-c)/s)**2)

def super_gaussian(x,y,amplitude,center,size,exponent):
    array=np.ones((len(y),len(x)))
    for i in range(len(x)):
        for j in range(len(y)):
            array[j,i]=amplitude*np.exp(-((x[i]-center)/size)**exponent)*np.exp(-((y[j]-center)/size)**exponent)
    return array
######################

def rectangle_droit(NombrePixel, debut, largeur, longueur, a):

    """ Crée un rectangle droit """

    if a == 0:

        img = np.ones([NombrePixel[0], NombrePixel[1]], dtype=int)

        for i in range(largeur-100):

            for j in range(longueur-100):

                img[ i+debut[1]-j , i+debut[0]+j ] = a

    else:

        img = np.zeros([NombrePixel[0], NombrePixel[1]], dtype=int)

        for i in range(largeur-100):

            for j in range(longueur-100):

                img[ i+debut[1]-j , i+debut[0]+j ] = a

    return img
    

def circle(r):
    img = np.zeros([1920, 1080], dtype=int)
    for x in range(1920):
        for y in range(1080):
            if((x-960)**2+(y-540)**2)<(r*r):
               img[x,y]=1
    return img

# Main code



if __name__ == "__main__":

    image_paths = [r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test1.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test2.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test3.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test4.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test5.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test6.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test7.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test8.bmp",
               r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test9.bmp"
               ]

    # definition of parameter
   
    display_time = 5800
    mirror_state= 1
    mirror_size = 10.8e-6         # = a
    Nx = 1920
    Ny = 1080
    pixel_number = (Nx, Ny)
   
   
    Demagnification=(np.sqrt(180000)*1.85)*(300*10.8)**(-1)
    Rotation_angle=-46.95
    ratio_px=10.8/1.85

    
       
    img_rect = rectangle(pixel_number, (960,540), largeursur2=100, longueursur2=100, a=mirror_state)#-rectangle(pixel_number, (960,540), largeursur2=199, longueursur2=199, a=mirror_state)
    img_points=points_magnification(pixel_number)
    
    image_path = r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test9.bmp"
   
    imgbmp=Image.open(image_path).rotate(Rotation_angle)
    im_array=np.transpose(np.array(imgbmp))
    im_array_cropped=im_array[1170:1460,1047:1337]
    img_exp=im_array_cropped
    #im_array_cropped=im_array[1320:1780,1175:1635] #for points magni
   


    #img_path_old=r"C:\Users\lavoine\Desktop\dmd thesis\FS testing\test1.bmp"
    img_path_old = r"C:\Users\lavoine\Desktop\Andor python\previous.bmp"

    previous_image=Image.open(img_path_old).rotate(Rotation_angle)
    previous_array=np.transpose(np.array(previous_image))
    previous_array_cropped=previous_array[1170:1460,1047:1337]
    img_old=Image.open(img_path_old)


    minP=120#1/3*np.max(im_array_cropped)
    rect_size=im_array_cropped.shape[0]
    pixel_number_target=[rect_size,rect_size]
    print("pixel_number_target", pixel_number_target)
    center=[rect_size//2,rect_size//2] 
    #target_img=minP*points_magnification(pixel_number)
    target_img=minP*rectangle(pixel_number_target,center, largeursur2=rect_size//2,longueursur2=rect_size//2,a=mirror_state)
    

    '''
    target_img=Image.fromarray(np.uint8((np.array(target_img))),mode="L")
    target_img.save("target_img.bmp") 
    '''

    #for display and 1st iteration img_old=target_img
    #img_old=target_img      
    #img_old = previous_array_cropped
    
    '''
    plt.figure(1)
    plt.imshow(target_img)
    plt.title("target_img")
    
    plt.figure(2)
    plt.imshow(img_exp)
    plt.title("img_exp cropped")
    
    plt.figure(3)
    plt.imshow(im_array)
    plt.title("im_array")

    plt.show()
    '''

    ##################### PID LOOP and CREATION OF THE NEW IMAGE ################
    Kp=0.2
    error=Kp*(target_img-img_exp)
    
    new_img=img_old+error   #hier noch alles fein
    img_old.close()

    '''
    plt.figure(1)
    plt.imshow(error)
    plt.colorbar()
    plt.title("error")
    plt.show()
    
    plt.figure(2)
    plt.imshow(img_old)
    plt.colorbar()
    plt.title("old img")
    plt.show()

    plt.figure(3)
    plt.imshow(new_img)
    plt.colorbar()
    plt.title("old img with added error")
    plt.show()
    '''

    ###################### CONVOLUTION WITH THE PSF ##################
    #convolution of image with added error with psf
    newsize=50
    x=np.linspace(-newsize//2,newsize//2,newsize)
    y=np.linspace(-newsize//2,newsize//2,newsize)
    sigmax=1.0
    sigmay=1.0
    exp_convol=np.ones((newsize,newsize))       
    for i in range(exp_convol.shape[0]):
        for k in range(exp_convol.shape[0]):
            exp_convol[i,k]=1/2/np.pi/sigmax/sigmay*np.exp(-1/2*x[i]**2/sigmax**2-1/2*y[k]**2/sigmay**2)
    img_conv=scipy.signal.fftconvolve(new_img,exp_convol,mode="same")
    img1=Image.fromarray(np.uint8((np.array(img_conv))),mode="L")
    img1.save("previous.bmp") 

    img2=img1.resize((200, 200))

    '''
    plt.figure(1)
    plt.imshow(img1)
    plt.title("convolution with psf")

    plt.figure(2)
    plt.imshow(img2)
    plt.title("resized convolution")
    '''

    newarray=np.array(img2) 


    ############## CREATION OF THE NEW FLOYD STEINBERG IMAGE ####################
    

    #RESCALING to necessary array size
    background=PIL.Image.new(mode="L",size=(1080,1920)) #creates array with zeros in size of dmd
    background_array=np.array(background)

    dim_img=newarray.shape
    print("Dimension convolved image: ", dim_img)
    for i in range(dim_img[0]):
        for k in range(dim_img[1]):
            background_array[(960-dim_img[1]//2)+i, (540-dim_img[0]//2)+k]+=newarray[i,k] 

    #for normalization of dithering
    print("max background array pre setting pixel values >255=255: ", np.max(background_array))
    background_array[background_array>255]=255
    print("max background array pre 255*np.max(): ", np.max(background_array))
    background_array=np.array((255/np.max(background_array))*background_array)
    print("max background array: ", np.max(background_array))


    #DITHERING
    imgfinal=Image.fromarray(np.uint8(background_array),mode="L")       #why is all of this necessary?
    img_FS=np.array(imgfinal.convert("1",dither=Image.Dither.FLOYDSTEINBERG))#>0.5  
    
    '''
    plt.figure(0)
    plt.imshow(im_array_cropped,'Blues')
    plt.title("imported image")
    plt.colorbar()

    plt.figure(1)
    plt.imshow(img_FS,'Blues')
    plt.title("final FS image, dithered and resized convolution")
    plt.colorbar()

    plt.figure(2)
    plt.imshow(background_array,'Blues')
    plt.title("Resized background img")
    plt.colorbar()

    plt.figure(3)
    plt.imshow(new_img,'Blues')
    plt.title("Error added to old img")
    plt.colorbar()
    
    plt.show()
    '''

    #print("imported image intensities:", "max=", np.max(img_old))
    print("old image with added error intensities:", "max=", np.max(new_img))
    print("colvolved image intensities:", "max=", np.max(img2))
    print("background array intensities: ", "max=", np.max(background_array))
    print("image passed to dithering intensities: ", "max=", np.max(imgfinal))
    print("FS image: ", "max=", np.max(img_FS))

    #creation of form
    #affiche_DMD([img_points], nbImg = 1, display_time = display_time) 
    #affiche_DMD([img_FS], nbImg = 1, display_time = display_time)
    #affiche_DMD([img_rect], nbImg = 1, display_time = display_time)

    plot_intensity(image_paths)
